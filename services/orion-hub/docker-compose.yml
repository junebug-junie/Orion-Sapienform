# ───────────────────────────────────────────────────────────────
# Orion Hub — Voice + Web Gateway
# ───────────────────────────────────────────────────────────────

# Environment files are now loaded via the command line for reliability.
# See the project's root README for the correct commands.

services:
  hub-app:
    build:
      context: ../..
      dockerfile: services/orion-hub/Dockerfile
    container_name: ${PROJECT:-orion}-hub
    volumes:
      - ./templates:/app/templates
      - /mnt/telemetry/models/whisper/distil-medium.en:/root/.cache/huggingface/hub/models--distil-whisper--distil-medium.en
    ports:
      - "${HUB_PORT:-8080}:8080"
    depends_on:
      coqui-tts:
        condition: service_started
    restart: unless-stopped
    environment:
      # These variables are now explicitly substituted by the docker compose command.
      - WHISPER_MODEL_SIZE=${WHISPER_MODEL_SIZE}
      - WHISPER_DEVICE=${WHISPER_DEVICE}
      - WHISPER_COMPUTE_TYPE=${WHISPER_COMPUTE_TYPE}
      - BRAIN_URL=${BRAIN_URL}
      - ORION_BUS_URL=${ORION_BUS_URL}
      - ORION_BUS_ENABLED=${ORION_BUS_ENABLED}

      # This is a static value, pointing to the coqui service on the docker network.
      - TTS_URL=http://coqui-tts:5002/api/tts

      # Optional GPU access
      - NVIDIA_VISIBLE_DEVICES=all
    runtime: nvidia
    networks:
      - ${NET:-app-net}

  coqui-tts:
    image: ghcr.io/coqui-ai/tts-cpu
    container_name: ${PROJECT:-orion}-hub-tts
    ports:
      - "5002:5002"
    volumes:
      - /mnt/telemetry/models/coqui/tts:/root/.local/share/tts
    environment:
      # This is a static value required by the tts-server.
      - TTS_MODEL_NAME=tts_models/en/ljspeech/vits
    restart: unless-stopped
    entrypoint: tts-server
    networks:
      - ${NET:-app-net}

  caddy:
    image: caddy:2-alpine
    container_name: ${PROJECT:-orion}-hub-caddy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./caddy/Caddyfile.${MODE:-dev}:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
    depends_on:
      - hub-app
    networks:
      - ${NET:-app-net}

volumes:
  caddy_data:
  caddy_config:

networks:
  app-net:
    external: true

