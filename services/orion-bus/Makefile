# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
# ðŸ§  Orion Bus Makefile â€” Generic Message Bus Layer
# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€

PROJECT ?= $(shell grep ^PROJECT= /mnt/services/Orion-Sapienform/.env | cut -d= -f2)
NET ?= app-net
CORE ?= $(PROJECT)-bus-core
EXPORTER ?= $(PROJECT)-bus-exporter

.PHONY: up down ps status logs cli tail stream.metrics

# Start or rebuild the bus stack
up:
	@docker network inspect $(NET) >/dev/null 2>&1 || docker network create $(NET)
	@docker compose up -d --build
	@echo "âœ” Bus Core: tcp://localhost:6379"
	@echo "âœ” Metrics:  http://localhost:9121/metrics"

# Stop and remove containers
down:
	@docker compose down --remove-orphans

# Show running containers
ps status:
	@docker compose ps
	@echo
	@docker ps --format 'table {{.Names}}\t{{.Image}}\t{{.Ports}}' \
	  | awk 'NR==1 || /bus-core|bus-exporter/'

# Follow logs from all services
logs:
	@docker compose logs -f --tail=100

# Drop into bus-core CLI (temporary redis backend)
cli:
	@docker exec -it $(CORE) redis-cli

# Stream raw event data (use carefully â€” very noisy)
tail:
	@docker exec -it $(CORE) redis-cli MONITOR

# Inspect any stream key (default = orion:evt:gateway)
STREAM ?= orion:evt:gateway
stream:
	@docker exec -it $(CORE) redis-cli XREVRANGE $(STREAM) + - COUNT 20

# Quick metric peek
metrics:
	@curl -s http://localhost:9121/metrics | head -n 25
